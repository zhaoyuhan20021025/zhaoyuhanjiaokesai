/*
 * @Author: wangchen35
 * @Date: 2022-11-29 17:29:28
 * @LastEditors: wangchen35
 * @LastEditTime: 2022-12-16 16:24:26
 * @Description: file content
 */
function cloneDeep(obj) {
    if (obj === null) {
        return obj;
    };
    if (obj instanceof Date) {
        return new Date(obj);
    };
    if (obj instanceof RegExp) {
        return new RegExp(obj);
    };
    if (typeof obj !== 'object') {
        return obj;
    };
    let cloneObj = new obj.constructor();
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
        // 递归深拷贝
            cloneObj[key] = cloneDeep(obj[key]);
        }
    }
    return cloneObj;
}

export const MAP_CACHE = {};

export function setLabelScale(num, originConfig) {
    const config = cloneDeep(originConfig);
    if (config.style) {
        const {width, height, borderRadius, borderWidth, paddingTop, paddingLeft} = config.style;
        config.style.width = width * num;
        config.style.height = height * num;
        if (borderRadius) {
            config.style.borderRadius = borderRadius * num;
        }
        if (borderWidth) {
            config.style.borderWidth = borderWidth * num;
        }
        if (paddingTop) {
            config.style.paddingTop = paddingTop * num;
        }
        if (paddingLeft) {
            config.style.paddingLeft = paddingLeft * num;
        }
    }
    if (config.content) {
        config.content.forEach((contentItem) => {
            for (let key in contentItem) {
                if (typeof contentItem[key] === 'number' && key !== 'id') {
                    contentItem[key] = contentItem[key] * num;
                }
            }
            const {position} = contentItem;
            if (position) {
                contentItem.position = position.map((pos) => pos * num);
            }
            contentItem.textList &&
                contentItem.textList.forEach((textItem) => {
                    textItem.fontSize = textItem.fontSize * num;
                    textItem.position = textItem.position.map((pos) => pos * num);
                });
        });
    }

    return config;
}

// 释放物体内的所有geometry，material，texture
export function disposeObject(obj) {
    if (obj.dispose) {
        obj.dispose();
    } else {
        obj.traverse((child) => {
            child.geometry && child.geometry.dispose();
            child.geometry = null;
            if (child.material) {
                child.material.map && child.material.map.dispose();
                child.material.alphaMap && child.material.alphaMap.dispose();
                child.material.envMap && child.material.envMap.dispose();
                child.material.lightMap && child.material.lightMap.dispose();
                child.material.normalMap && child.material.normalMap.dispose();
                child.material.map = null;
                child.material.alphaMap = null;
                child.material.envMap = null;
                child.material.lightMap = null;
                child.material.normalMap = null;
                child.material.dispose();
                child.material = null;
            }
        });
    }
}