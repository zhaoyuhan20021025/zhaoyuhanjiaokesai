import {Ws} from '../utils/ws';
import qs from 'query-string';
// 接口地址
const API = {
    getScene: '/digitalAssets/screen/getProjectSceneById',
    getModels: '/digitalAssets/screen/searchModelInfos',
    getMaterials: '/digitalAssets/screen/getMaterialInfo',
    getDevice: '/digitalAssets/screen/getDeviceByConditions',
    getProjectDetail: '/digitalAssets/screen/getProjectDetail',
    getResourceUrlPrefix: '/digitalAssets/getStaticResourceUrl',
    getDeviceByRadius: '/digitalAssets/screen/getDeviceListByRadius',
    updateDevice: '/digitalAssets/screen/edit3dDeviceToOnline',
    deleteDevice: '/digitalAssets/screen/deleteDevice',
};

// 请求的host
let myHost = 'https://ace.apollo.auto';
// 存储project_id参数
let myProjectId = '';

// 自定义header
const myHeaders = {

};

function ajaxRequest(option) {
    let _resolve = null;
    let _reject = null;
    const promise = new Promise((resolve, reject) => {
        _resolve = resolve;
        _reject = reject;
    });
    if (Object.prototype.toString.call(option) !== '[object Object]') {
        return Promise.resolve(null);
    }

    option.method = option.method ? option.method.toUpperCase() : 'GET';
    option.data = option.data || {};
    option.type = option.type || 'json';

    const formData = [];
    Object.keys(option.data).forEach(key => {
        formData.push(`${key}=${option.data[key]}`);
    });
    const urlParams = formData.join('&');
    if (option.method === 'GET' && formData.length > 0) {
        option.url += option.url.includes('?') ? `&${urlParams}` : `?${urlParams}`;
    }
    const xhr = new XMLHttpRequest();
    xhr.responseType = option.type;
    xhr.withCredentials = true;
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                _resolve(xhr.response.data);
            } else {
                _reject(new Error(xhr.statusText));
            }
        }
    };
    xhr.open(option.method, joinUrl(option.url), true);
    Object.keys(myHeaders).forEach(key => {
        xhr.setRequestHeader(key, myHeaders[key]);
    });
    // if (option.method === 'POST') {
    //     xhr.setRequestHeader('Content-Type', 'application/json')
    // } else {
    // }
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.send(option.method === 'POST' ? JSON.stringify(option.data) : null);

    return promise;
}

function joinUrl(url = '') {
    let host = myHost;
    if (host.endsWith('/')) {
        host = host.substring(0, host.length - 1);
    }
    if (url.indexOf('http') > -1) {
        return url;
    }
    return host + url;
}

export function setHost(host) {
    myHost = host;
}

export function setProjectID(projectId) {
    myProjectId = projectId;
}

export function setHeaders(headers) {
    Object.assign(myHeaders, headers);
}

export const getScene = sceneId => {
    const config = {
        url: API.getScene,
        data: {
            id: sceneId,
        },
    };
    return ajaxRequest(config);
};

export const getProjectDetail = projectId => {
    const config = {
        url: API.getProjectDetail,
        data: {
            project_id: projectId,
        },
    };
    return ajaxRequest(config);
};

export const getMaterialInfo = () => {
    const config = {
        url: API.getMaterials,
    };
    return ajaxRequest(config);
};

export const getAllModels = projectId => {
    const config = {
        url: API.getModels,
        data: {
            all: 1,
            common: 1,
            projectId: projectId,
        },
        method: 'post',
    };
    return ajaxRequest(config);
};

export const getDeviceList = projectId => {
    const config = {
        url: API.getDevice,
        data: {
            count: 1,
            layer_id: 1,
            page_size: 100000,
            status: 1,
            project_id: projectId,
        },
        method: 'post',
    };
    return ajaxRequest(config);
};

export const getResourcePrefix = () => {
    const config = {
        url: API.getResourceUrlPrefix,
    };
    return ajaxRequest(config);
};

export const getDeviceByRadius = params => {
    const config = {
        url: API.getDeviceByRadius,
        data: {
            x: params.x,
            y: params.y,
            radius: params.radius || 500,
            type: 'online',
            project_id: myProjectId,
        },
        method: 'post',
    };
    return ajaxRequest(config);
};

/**
 * 从接口获取全部数据
 * @param config
 * @returns {Promise<{sceneConfig: {}, deviceList: [], lodUrl: string}>}
 */
export async function getAllData(config = {}) {
    function transformObj(str, type = 'array') {
        const defaultValue = type === 'array' ? [] : {};
        if (!str || str === 'null') {
            return defaultValue;
        }
        let result = defaultValue;
        try {
            result = JSON.parse(str);
        } catch (e) {
            console.error(e);
        }
        return result;
    }

    const {
        host = 'https://ace.apollo.auto',
        sceneId = 219,
        bearer = '',
    } = config;
    setHost(host);
    setHeaders({Authorization: bearer});

    let _resolve = null;
    let _reject = null;
    const promise = new Promise((resolve, reject) => {
        _resolve = resolve;
        _reject = reject;
    });

    try {
        const result = {};
        const sceneResult = await getScene(sceneId);
        const {project_id, confs = '', material_list = '', scene_device_list = ''} = sceneResult;
        setProjectID(project_id);
        Promise.all([
            getProjectDetail(project_id),
            getMaterialInfo(),
            getAllModels(project_id),
            getDeviceList(project_id),
            getResourcePrefix(),
        ]).then(resArr => {
            const {map_url = '', map_zone = 0} = resArr[0].projectInfo || {};
            const resourceUrl = resArr[4];
            result.deviceList = combineDeviceUrl(resourceUrl, resArr[3].deviceList);
            result.mapConfig = {
                sceneConfig: combineSceneUrl(resourceUrl, transformObj(confs, 'object')),
                lodUrl: map_url,
                zone: map_zone,
                modelMaterials: transformObj(material_list),
                sceneDeviceList: transformObj(scene_device_list),
            };
            result.modelList = combineModelUrl(resourceUrl, resArr[2].modelInfoSearch);
            result.materialList = combineMaterialUrl(resourceUrl, resArr[1]);
            result.resourceUrl = resourceUrl;
            result.projectId = project_id;
            _resolve(result);
        });
    } catch (e) {
        _reject(e);
    }

    return promise;
}

export async function queryDeviceByRadius(config = {}) {
    return await getDeviceByRadius(config);
}

function genUrl(url, prefix, isSkyBox = false) {
    if (url.startsWith('http') || url.startsWith('//')) {
        let fileName = url.split('/').slice(-1)[0];
        if (isSkyBox) {
            fileName = url.split('/').slice(-2)[0] + '/';
        }
        return prefix + fileName;
    }
    const myUrl = url.startsWith('/') ? url.substring(1) : url;
    return prefix + myUrl;
}

export function combineModelUrl(resourceUrl = {}, data = []) {
    const modelPrefix = resourceUrl.modelUrl;
    const imagePrefix = resourceUrl.imageUrl;

    data.forEach(item => {
        item.extranet_image = genUrl(item.extranet_image, imagePrefix);
        item.extranet_url = genUrl(item.extranet_url, modelPrefix);
        if (item.children) {
            const children = JSON.parse(item.children);
            children.forEach(v => {
                v.extranet_image && (v.extranet_image = genUrl(v.extranet_image, imagePrefix));
                v.extranet_url && (v.extranet_url = genUrl(v.extranet_url, modelPrefix));
            });
            item.children = JSON.stringify(children);
        }
    });

    return data;
}

export function combineDeviceUrl(resourceUrl = {}, data = []) {
    const imagePrefix = resourceUrl.imageUrl;

    data.forEach(item => {
        const images = JSON.parse(item.images || '[]');
        images.forEach(v => {
            v.url = genUrl(v.url, imagePrefix);
        });
        item.images = JSON.stringify(images);
    });

    return data;
}

export function combineMaterialUrl(resourceUrl = {}, data = []) {
    const imagePrefix = resourceUrl.imageUrl;
    data.forEach(item => {
        const config = JSON.parse(item.json);
        Object.keys(config).forEach(key => {
            const value = config[key];
            if (key === 'map' && value) {
                if (typeof value === 'string') {
                    config[key] = genUrl(value, imagePrefix);
                } else if (value.url) {
                    config[key].url = genUrl(value.url, imagePrefix);
                }
            } else if (key === 'envMap' && value) {
                if (Array.isArray(value)) {
                    config[key] = value.map(v => genUrl(v, imagePrefix));
                } else if (typeof value === 'string') {
                    config[key] = genUrl(value, imagePrefix);
                }
            }
        });
        item.json = JSON.stringify(config);
    });
    return data;
}

export function combineSceneUrl(resourceUrl = {}, data = {}) {
    const imagePrefix = resourceUrl.imageUrl;
    const skyboxPrefix = resourceUrl.skyBoxUrl;

    Object.keys(data).forEach(key => {
        const value = data[key];
        if (key === 'back') {
            if (value && value.map) {
                data[key].map = genUrl(value.map, skyboxPrefix, true);
            }
        } else {
            Object.keys(value).forEach(attribute => {
                const temp = value[attribute];
                if (attribute === 'map' && temp) {
                    if (typeof value === 'string') {
                        value[attribute] = genUrl(temp, imagePrefix);
                    } else if (temp.url) {
                        value[attribute].url = genUrl(temp.url, imagePrefix);
                    }
                } else if (key === 'envMap' && temp) {
                    value[attribute] = genUrl(temp, imagePrefix);
                }
            });
        }
    });
    return data;
}

export function updateDeviceInfo(data) {
    const config = {
        url: API.updateDevice,
        data,
        method: 'POST',
    };
    return ajaxRequest(config);
}

export function deleteDevice(uuid) {
    const config = {
        url: API.deleteDevice,
        data: {
            uuid: [uuid],
            status: 1,
        },
        method: 'POST',
    };
    return ajaxRequest(config);
}

export const connectAssetsSync = async host => {
    const [type, ip] = host.split('://');
    const wsType = type === 'http' ? 'ws' : 'wss';
    const ws = new Ws({
        needToken: false,
    });
    return {
        ws,
        connect: await ws.connect(`${wsType}://${ip}/digitalAssets/pushUpdate`),
    };
};

export const checkAuth = async (params, host) => {
    const str = qs.stringify(params);
    const token = await fetch(`${host}/bff/login?${str}`, {
        method: 'GET',
    });
    return token.json();
};