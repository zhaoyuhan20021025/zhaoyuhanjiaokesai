export class ViewShedAnalysis {
    _distance: any;
    _isAutoDistance: boolean;
    _viewPosition: any;
    _targetPosition: any;
    _visibleColor: number;
    _invisibleColor: number;
    _camera: any;
    _fov: number;
    afterAddToEngine(engine: any): void;
    _engine: any;
    set visibleColor(arg: number);
    get visibleColor(): number;
    set invisibleColor(arg: number);
    get invisibleColor(): number;
    createDepth(camera?: any): any;
    /**
     * 创建视锥体线框
     */
    createOutlineFrustum(): any;
    /**
     * 计算可见性shader
     */
    createShadowMapGLSL(): {
        uniforms: {
            tDiffuse: {
                value: null;
            };
            tDepth: {
                value: null;
            };
            shadowMap: {
                value: null;
            };
            cameraNear: {
                value: null;
            };
            cameraFar: {
                value: null;
            };
            mvt_projectionInverseMatrix: {
                value: any;
            };
            mvt_viewInverseMatrix: {
                value: any;
            };
            lightPosition: {
                value: any;
            };
            lightCameraNear: {
                value: null;
            };
            lightCameraFar: {
                value: null;
            };
            lightViewMatrix: {
                value: any;
            };
            lightProjectionMatrix: {
                value: any;
            };
            texelStepSize: {
                value: any;
            };
            visibleColor: {
                value: any;
            };
            invisibleColor: {
                value: any;
            };
        };
        vertexShader: string;
        fragmentShader: string;
    };
    _updateUniforms: () => void;
    /**
     * 开始可视域分析
     */
    build(): void;
    _outlineFrustum: any;
    _viewshedPass: any;
    /**
     * 关闭可视域分析
     */
    close(): void;
    set viewPosition(arg: any);
    /**
     * 可视域分析起点
     */
    get viewPosition(): any;
    set targetPosition(arg: any);
    /**
     * 可视域分析终点
     */
    get targetPosition(): any;
    set distance(arg: any);
    get distance(): any;
    set fov(arg: number);
    get fov(): number;
}
