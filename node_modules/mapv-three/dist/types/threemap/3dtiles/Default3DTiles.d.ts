/**
 * 加载3DTiles
 *
 * 3DTiles必须为基于2.5D坐标系统，不支持Cesium的ECEF坐标系统切片
 *
 * boudingVolume支持sphere和box，不支持region
 */
export class Default3DTiles {
    /**
     * @param {{
     *     url: string,
     *     errorTarget: number,
     * }} options
     * @param {string} options.url 根节点的tileset.json文件地址
     * @param {number} options.errorTarget 控制LOD的屏幕误差
     */
    constructor(options: {
        url: string;
        errorTarget: number;
    });
    /** @private */
    private options;
    /** @private */
    private _tilesRenderer;
    /** @private */
    private _elementsManager;
    /** @private */
    private _elementsGroup;
    /** @private */
    private _editableElementManager;
    /** @private */
    private engine;
    /**
     * @private
     * 瓦片最大层级，以此计算LODlevel
    */
    private _tileMaxLevel;
    /**
     * @public @readonly
     *
     */
    public readonly is3DTiles: true;
    /** @private */
    private _materialManager;
    /** @private */
    private _debugTilesRenderer;
    /** @private */
    private _freezeUpdate;
    /** @private */
    private _excludeCastShadowMaterials;
    /** @private */
    private _instancedElementManager;
    /** @private */
    private _identityType;
    /** @private */
    private _visibile;
    /**
     * @private
     */
    private _loaders;
    /**
     * @protected
     */
    protected afterAddToEngine(engine: any): void;
    /**
     * 获取边界盒
     * @returns box array[]
     */
    getBounds(): any;
    /**
     * @private
     */
    private handleBeforeRender;
    /**
     * @private
     */
    private handleLoadTileSet;
    /**
     * @private
     */
    private handleUpdateModel;
    /**
     * @private
     */
    private parseTileInfo;
    /**
     * @private
     */
    private handleLoadModel;
    /**
     * @private
     */
    private handleDisposeModel;
    /**
     * @private
     */
    private handleTileVisibleChanged;
    /**
     * @private
     */
    private handleDebugBeforeengineRender;
    /**
     * @private
     */
    private _updateTilesCustomLoaders;
    /**
     * @private
     */
    private createDebugTilesRenderer;
    /**
     * @private
     */
    private handleDebugLoadTileSet;
    /**
     * @private
     */
    private handleDebugLoadModel;
    /**
     * 将ECEF坐标转换为平面坐标
     * @param {number} lng 经度
     * @param {number} lat 纬度
     * @param {number} height 高程
     */
    transformFromEcefToPlane: (lng: number, lat: number, height?: number) => void;
    /**
     * @private
     */
    private isEntityVisible;
    /**
     * @private
     */
    private destoryDebugTilesRenderer;
    /**
     * @private
     */
    private disposeTilesRender;
    dispose(): void;
    /**
     * 3dtiles的材质管理器，可以利用它来设置3dtiles的不同材质，如真实材质
     */
    set materialManager(arg: any);
    get materialManager(): any;
    /**
     * 是否展示debugTilesRenderer
     */
    set showDebug(arg: boolean);
    get showDebug(): boolean;
    /**
     * 瓦片渲染器的一种变体，包括了用于调试和可视化各种瓦片集中瓦片的能力
     */
    get debugTilesRenderer(): any;
    get elementsManager(): any;
    set freezeUpdate(arg: boolean);
    /**
     * 是否禁止3dtile更新
     */
    get freezeUpdate(): boolean;
    set errorTarget(arg: any);
    /**
     * 屏幕空间误差,如果瓦片的errorTarget低于这个级别，那么它将不会被渲染
     */
    get errorTarget(): any;
    /**
     * 瓦片的容器组，可以将它添加到three.js场景中渲染它
     */
    get tilesGroup(): any;
    /**
     * 渲染器，它是基于3d-tiles-renderer的TileRenderer实现的
     */
    get tilesRenderer(): any;
    get instancedElementManager(): any;
    /**
     * 编辑管理器，可以使用它来批量添加或删除元素
     */
    get editableElementManager(): any;
    set identityType(arg: number);
    /**
     * 若当前3dtilesManager为的材质为Identity3DTilesMaterialManager，可以通过identityType来得到不同的材质
     */
    get identityType(): number;
    set visible(arg: boolean);
    get visible(): boolean;
}
