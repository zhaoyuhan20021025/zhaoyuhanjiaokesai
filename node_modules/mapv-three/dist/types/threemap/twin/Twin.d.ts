export class Twin {
    constructor(options?: {});
    /** @private */ private engine;
    /** @private */ private _dataProvider;
    /**
     * @private
     * modelType和model的映射关系
     */
    private _modelConfig;
    /**
     * @private
     * 模型是否完成加载
     */
    private _modelLoaded;
    /**
     * @private
     * modelType和每帧entity返回buffers的映射
     */
    private _buffers;
    /**
     * @private
     * modelType和模型实例的映射
     */
    private _instances;
    /**
     * @private
     * 除模型外的孪生虚拟实体
     */
    private _objects;
    /**
     * @private
     * 除模型外的孪生虚拟实体的 dataSource 的 attribute 映射
     */
    private _objectAttributes;
    options: {};
    set modelConfig(arg: {});
    get modelConfig(): {};
    _delay: any;
    _entityManager: EntityManager;
    /**
     * @protected
     */
    protected afterAddToEngine(engine: any): void;
    set objects(arg: any[]);
    get objects(): any[];
    push(data: any): void;
    _isStarted: boolean | undefined;
    /**
     * @private
     */
    private handleBeforeRender;
    _filterBuffer(modelIndexMap: any, model: any): {
        id: any[];
        translation: any[];
        rotation: any[];
        scale: any[];
        modelType: any[];
    } | null;
    loadModelAsync(url: any): Promise<any>;
    modelClear(): void;
    getCurrentBuffers(): {};
    get dataProvider(): any;
    get entityManager(): EntityManager;
    set objectAttributes(arg: {});
    get objectAttributes(): {};
}
import { EntityManager } from "./EntityManager";
