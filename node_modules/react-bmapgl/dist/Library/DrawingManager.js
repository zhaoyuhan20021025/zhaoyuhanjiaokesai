"use strict";
/**
 * @file 鼠标绘制工具库
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var common_1 = require("../common");
var requireScript_1 = require("../utils/requireScript");
var WrapperHOC_1 = tslib_1.__importStar(require("../common/WrapperHOC"));
var Map_1 = require("../Map/Map");
var eventsMap = [
    'overlaycomplete',
    'overlaycancel'
];
var methodsMap = {
    enableCalculate: ['enableCalculate', 'disableCalculate'],
    enableSorption: ['enableSorption', 'disableSorption'],
    enableGpc: ['enableGpc', 'disableGpc']
};
var drawOptions = {
    strokeColor: '#5E87DB',
    fillColor: '#5E87DB',
    strokeWeight: 2,
    strokeOpacity: 1,
    fillOpacity: 0.2
};
var labelOptions = {
    borderRadius: '2px',
    background: '#FFFBCC',
    border: '1px solid #E1E1E1',
    color: '#703A04',
    fontSize: '12px',
    letterSpacing: '0',
    padding: '5px'
};
var DrawingManager = /** @class */ (function (_super) {
    tslib_1.__extends(DrawingManager, _super);
    function DrawingManager(props) {
        var _this = _super.call(this, props) || this;
        _this.el = react_1.default.createRef();
        _this.options = [
            'isOpen',
            'drawingMode',
            'enableDrawingTool',
            'enableCalculate',
            'enableSorption',
            'enableGpc',
            'enableLimit',
            'sorptionDistance',
            'limitOptions',
            'drawingToolOptions',
            'markerOptions',
            'circleOptions',
            'polylineOptions',
            'polygonOptions',
            'rectangleOptions',
            'labelOptions'
        ];
        return _this;
    }
    DrawingManager.prototype.componentDidMount = function () {
        this.initialize();
    };
    DrawingManager.prototype.componentWillUnmount = function () {
        this.destroy();
    };
    DrawingManager.prototype.destroy = function () {
        if (this.drawingmanager) {
            this.drawingmanager.close();
            // @ts-ignore
            this.instance = this.drawingmanager = undefined;
        }
    };
    DrawingManager.prototype.initialize = function () {
        var _this = this;
        var map = this.map = this.getMap();
        if (!map) {
            return;
        }
        this.destroy();
        var opts = this.getOptions();
        var drawStyles = ['circleOptions', 'polylineOptions', 'polygonOptions', 'rectangleOptions'];
        for (var i = 0; i < drawStyles.length; i++) {
            var styl = drawStyles[i];
            if (!opts[styl]) {
                opts[styl] = drawOptions;
            }
        }
        if (!opts.labelOptions) {
            opts.labelOptions = labelOptions;
        }
        opts.drawingToolOptions.customContainer = this.el.current;
        // 如果 BMapGLLib 已经加载过，会执行下面的
        if (window.BMapGLLib && BMapGLLib.DrawingManager) {
            this.instance = this.drawingmanager = new BMapGLLib.DrawingManager(map, opts);
        }
        // 如果第一次加载，会执行下面的
        if (!window.BMapGLLib || !BMapGLLib.DrawingManager) {
            var cssUrl = this.props.cssUrl || '//mapopen.bj.bcebos.com/github/BMapGLLib/DrawingManager/src/DrawingManager.min.css';
            var scriptUrl = this.props.scriptUrl || '//mapopen.bj.bcebos.com/github/BMapGLLib/DrawingManager/src/DrawingManager.min.js';
            requireScript_1.requireCss(cssUrl)
                .then(function () { });
            requireScript_1.requireScript(scriptUrl)
                .then(function () {
                _this.instance = _this.drawingmanager = new BMapGLLib.DrawingManager(map, opts);
                // 因为是异步加载，所以不会自动注册事件和执行方法，需要手动注册和执行
                WrapperHOC_1.registerEvents(_this, _this.getInstance(_this), eventsMap);
                WrapperHOC_1.toggleMethods(_this, _this.getInstance(_this), methodsMap);
            });
        }
    };
    DrawingManager.prototype.render = function () {
        return (react_1.default.createElement("div", { className: "react-bmapgl-drawingmanager", ref: this.el, style: this.props.style }));
    };
    DrawingManager.contextType = Map_1.MapContext;
    return DrawingManager;
}(common_1.Component));
DrawingManager.defaultProps = {
    isOpen: false,
    enableDrawingTool: true,
    enableCalculate: false,
    enableSorption: false,
    enableGpc: false,
    enableLimit: false,
    sorptionDistance: 20,
    limitOptions: {
        area: 50000000,
        distance: 30000
    },
    drawingToolOptions: {},
    style: {
        position: 'absolute',
        left: 0,
        top: 0,
        width: 360
    }
};
/**
 * 用来在地图上通过鼠标绘制覆盖物，该组件属于不属于原生JSAPI，属于开源工具库[BMapGLLib](https://github.com/huiyan-fe/BMapGLLib)
 * @visibleName DrawingManager 鼠标绘制工具
 */
exports.default = WrapperHOC_1.default(DrawingManager, eventsMap, methodsMap);
