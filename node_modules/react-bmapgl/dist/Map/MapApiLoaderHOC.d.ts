/**
 * @file 异步加载JSAPI的高阶组件
 * @author hedongran [hdr01@126.com]
 */
import React from 'react';
interface WrapperHocProps {
    ak: string;
}
interface MapApiLoaderProps {
    [key: string]: any;
}
interface MapApiLoaderState {
    loaded: boolean;
}
declare const _default: (hocProps: WrapperHocProps) => (WrappedComponent: any) => {
    new (props: MapApiLoaderProps): {
        apiTimer: number;
        loadedTimer: number;
        isLoadReady(): boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        loadJSAPI(): void;
        handleLoaded(): void;
        render(): JSX.Element;
        context: any;
        setState<K extends "loaded">(state: MapApiLoaderState | ((prevState: Readonly<MapApiLoaderState>, props: Readonly<MapApiLoaderProps>) => MapApiLoaderState | Pick<MapApiLoaderState, K> | null) | Pick<MapApiLoaderState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<MapApiLoaderProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<MapApiLoaderState>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<MapApiLoaderProps>, nextState: Readonly<MapApiLoaderState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<MapApiLoaderProps>, prevState: Readonly<MapApiLoaderState>): any;
        componentDidUpdate?(prevProps: Readonly<MapApiLoaderProps>, prevState: Readonly<MapApiLoaderState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<MapApiLoaderProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<MapApiLoaderProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<MapApiLoaderProps>, nextState: Readonly<MapApiLoaderState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<MapApiLoaderProps>, nextState: Readonly<MapApiLoaderState>, nextContext: any): void;
    };
    displayName: string;
    contextType?: React.Context<any> | undefined;
};
/**
 * 异步加载JSAPI的高阶组件，在业务组件中使用，从而实现将JSAPI以异步形式插入，而不是提前放到`index.html`模板里。
 * @visibleName MapApiLoaderHOC 异步加载HOC
 */
export default _default;
