"use strict";
/**
 * @file 地图核心组件
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapContext = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var common_1 = require("../common");
var WrapperHOC_1 = tslib_1.__importDefault(require("../common/WrapperHOC"));
var shallowequal_1 = tslib_1.__importDefault(require("shallowequal"));
var isString_1 = tslib_1.__importDefault(require("../utils/isString"));
;
var eventsMap = [
    'click',
    'dblclick',
    'rightclick',
    'rightdblclick',
    'maptypechange',
    'mousemove',
    'mouseover',
    'mouseout',
    'movestart',
    'moving',
    'moveend',
    'zoomstart',
    'zoomend',
    'addoverlay',
    'addcontrol',
    'removecontrol',
    'removeoverlay',
    'clearoverlays',
    'dragstart',
    'dragging',
    'dragend',
    'addtilelayer',
    'removetilelayer',
    'load',
    'resize',
    'hotspotclick',
    'hotspotover',
    'hotspotout',
    'tilesloaded',
    'touchstart',
    'touchmove',
    'touchend',
    'longpress'
];
var methodsMap = {
    enableScrollWheelZoom: ['enableScrollWheelZoom', 'disableScrollWheelZoom'],
    enableDragging: ['enableDragging', 'disableDragging'],
    enableDoubleClickZoom: ['enableDoubleClickZoom', 'disableDoubleClickZoom'],
    enableKeyboard: ['enableKeyboard', 'disableKeyboard'],
    enableInertialDragging: ['enableInertialDragging', 'disableInertialDragging'],
    enableContinuousZoom: ['enableContinuousZoom', 'disableContinuousZoom'],
    enablePinchToZoom: ['enablePinchToZoom', 'disablePinchToZoom'],
    enableRotate: ['enableRotate', 'disableRotate'],
    enableTilt: ['enableTilt', 'disableTilt'],
    enableAutoResize: ['enableAutoResize', 'disableAutoResize']
};
;
exports.MapContext = react_1.default.createContext({
    // We provide a default function for Context without provider
    map: undefined
});
var Map = /** @class */ (function (_super) {
    tslib_1.__extends(Map, _super);
    function Map(props) {
        var _this = _super.call(this, props) || this;
        _this.el = react_1.default.createRef();
        _this.options = [
            'minZoom',
            'maxZoom',
            'mapType',
            'backgroundColor',
            'displayOptions'
        ];
        return _this;
    }
    Map.prototype.componentDidMount = function () {
        this.initialize();
        this.forceUpdate();
    };
    Map.prototype.componentDidUpdate = function (prevProps) {
        var preCenter = prevProps.center, preZoom = prevProps.zoom;
        var _a = this.props, center = _a.center, zoom = _a.zoom;
        var isCenterChanged = !!center && !shallowequal_1.default(preCenter, center);
        var isZoomChanged = !!(zoom && !shallowequal_1.default(preZoom, zoom));
        var centerPoint;
        if (isString_1.default(center)) {
            centerPoint = center;
        }
        else {
            var _b = center, lng = _b.lng, lat = _b.lat;
            centerPoint = new BMapGL.Point(lng, lat);
        }
        if (isCenterChanged && isZoomChanged) {
            this.map.centerAndZoom(centerPoint, zoom);
        }
        else if (isCenterChanged) {
            this.map.setCenter(centerPoint);
        }
        else if (isZoomChanged) {
            this.map.setZoom(zoom);
        }
    };
    Map.prototype.componentWillUnmount = function () {
        /**
         * 销毁地图，当使用 WebGL 渲染地图时，如果确认不再使用该地图实例，则需要
         * 调用本方法销毁 WebGL 上下文，否则频繁创建新地图实例会导致浏览器报：
         * too many WebGL context 的警告。
         */
        if (this.map) {
            this.map.destroy();
        }
    };
    Map.prototype.initialize = function () {
        if (this.map) {
            return;
        }
        // 创建Map实例，defaultOptions优先级低于指定配置
        var options = Object.assign({}, this.props.defaultOptions, this.getOptions());
        if (options.mapType) {
            options.mapType = (options.mapType === 'normal' ? BMAP_NORMAL_MAP : options.mapType);
            options.mapType = (options.mapType === 'earth' ? BMAP_EARTH_MAP : options.mapType);
        }
        if (this.props.mapStyleV2) {
            options.style = this.props.mapStyleV2;
        }
        var map = new BMapGL.Map(this.el.current, options);
        this.map = map;
        this.instance = map;
        // 正常传入经纬度坐标
        if (isString_1.default(this.props.center)) {
            map.centerAndZoom(this.props.center, this.props.zoom); // 初始化地图,设置中心点坐标和地图级别
        }
        else {
            var _a = this.props.center, lng = _a.lng, lat = _a.lat;
            var center = new BMapGL.Point(lng, lat);
            map.centerAndZoom(center, this.props.zoom); // 初始化地图,设置中心点坐标和地图级别
        }
        if (this.props.heading) {
            map.setHeading(this.props.heading);
        }
        if (this.props.tilt) {
            map.setTilt(this.props.tilt);
        }
    };
    Map.prototype.renderChildren = function (children, map) {
        var _this = this;
        if (!children || !map)
            return;
        return react_1.default.Children.map(children, function (child) {
            if (!child) {
                return null;
            }
            if (typeof child.type === 'string' || !child.props) {
                return child;
            }
            return react_1.default.cloneElement(child, { map: map }, _this.renderChildren(child.props.children, map));
        });
    };
    Map.prototype.render = function () {
        return (react_1.default.createElement("div", { style: this.props.style },
            react_1.default.createElement("div", { ref: this.el, className: this.props.className, style: { height: '100%' } }, "\u52A0\u8F7D\u5730\u56FE\u4E2D..."),
            react_1.default.createElement(exports.MapContext.Provider, { value: {
                    map: this.map
                } }, this.renderChildren(this.props.children, this.map))));
    };
    return Map;
}(common_1.Component));
/**
 * defaultProps属性要放在外面，不然生成API文档时，没有默认值
 */
Map.defaultProps = {
    center: { lng: 116.404449, lat: 39.914889 },
    zoom: 12,
    defaultOptions: {},
    style: {
        position: 'relative',
        height: '360px'
    }
};
/**
 * 地图核心对象，地图控件、覆盖物、图层等需作为其子组件，以获得map的实例化对象
 * @visibleName Map 地图
 */
exports.default = WrapperHOC_1.default(Map, eventsMap, methodsMap);
// 顺便给MapApiLoaderHOC在index中加个入口
var MapApiLoaderHOC_1 = require("./MapApiLoaderHOC");
Object.defineProperty(exports, "MapApiLoaderHOC", { enumerable: true, get: function () { return MapApiLoaderHOC_1.default; } });
