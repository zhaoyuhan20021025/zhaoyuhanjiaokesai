"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
// @ts-ignore
var mapvgl_1 = require("mapvgl");
var shallowequal_1 = tslib_1.__importDefault(require("shallowequal"));
var common_1 = require("../common");
var DEFAULT_COLOR = 'rgba(60, 50, 200, 0.9)';
/**
 * 根据起终点地名或者坐标，自动生成2D弧线，可用于OD等场景的效果展示
 * @visibleName Arc 2D弧线
 */
var Arc = /** @class */ (function (_super) {
    tslib_1.__extends(Arc, _super);
    function Arc(props) {
        var _this = _super.call(this, props) || this;
        _this._createLayer = false;
        return _this;
    }
    Arc.prototype.componentDidMount = function () {
        this.initialize();
    };
    Arc.prototype.componentDidUpdate = function (prevProps) {
        if (!shallowequal_1.default(this.props, prevProps)) {
            this.initialize();
        }
    };
    Arc.prototype.componentWillUnmount = function () {
        this.destroy();
    };
    Arc.prototype.destroy = function () {
        this._createLayer = false;
        this.view.destroy();
        // @ts-ignore
        this.view = undefined;
        // @ts-ignore
        this.linelayer = undefined;
        // @ts-ignore
        this.arrowlayer = undefined;
        // @ts-ignore
        this.flowlayer = undefined;
        // @ts-ignore
        this.pointlayer = undefined;
        // @ts-ignore
        this.textlayer = undefined;
        // @ts-ignore
        this.colorarrowlayers = [];
    };
    Arc.prototype.initialize = function () {
        var _this = this;
        var map = this.map = this.getMap();
        if (!map) {
            return;
        }
        if (!this._createLayer) {
            this.createLayers();
        }
        var lineData = [];
        var pointData = [];
        var arrowMap = new Map();
        // 清空箭头匹配颜色的layer
        if (this.colorarrowlayers && this.colorarrowlayers.length) {
            for (var i = 0; i < this.colorarrowlayers.length; i++) {
                var layer = this.colorarrowlayers[i];
                this.view.removeLayer(layer);
            }
        }
        this.colorarrowlayers = [];
        if (this.props.data) {
            var points_1 = [];
            var curve_1 = new mapvgl_1.OdCurve();
            this.props.data.forEach(function (item) {
                var start = item.from.point || mapvgl_1.utilCity.getCenterByCityName(item.from.city);
                var end = item.to.point || mapvgl_1.utilCity.getCenterByCityName(item.to.city);
                start = new BMapGL.Point(start.lng, start.lat);
                end = new BMapGL.Point(end.lng, end.lat);
                curve_1.setOptions({
                    points: [start, end]
                });
                var curveModelData = curve_1.getPoints();
                if (_this.props.coordType === 'bd09mc') {
                    points_1.push(BMapGL.Projection.convertMC2LL(start));
                    points_1.push(BMapGL.Projection.convertMC2LL(end));
                }
                else {
                    points_1.push(start);
                    points_1.push(end);
                }
                lineData.push({
                    geometry: {
                        type: 'LineString',
                        coordinates: curveModelData
                    },
                    color: item.color
                });
                var arrowData = arrowMap.get(item.color) || [];
                arrowData.push({
                    geometry: {
                        type: 'LineString',
                        coordinates: curveModelData
                    }
                });
                arrowMap.set(item.color, arrowData);
                if (_this.props.showEndPoint !== false) {
                    pointData.push({
                        geometry: {
                            type: 'Point',
                            coordinates: [end.lng, end.lat]
                        },
                        color: item.color,
                        properties: {
                            text: item.to.name || item.to.city
                        }
                    });
                }
                if (_this.props.showStartPoint !== false) {
                    pointData.push({
                        geometry: {
                            type: 'Point',
                            coordinates: [start.lng, start.lat]
                        },
                        color: item.color,
                        properties: {
                            text: item.from.name || item.from.city
                        }
                    });
                }
                if (points_1.length > 0) {
                    if (_this.props.autoViewport === true) {
                        map.setViewport(points_1, _this.props.viewportOptions || {});
                    }
                }
            });
        }
        this.linelayer.setData(lineData);
        if (this.props.lineOptions) {
            this.linelayer.setOptions(this.props.lineOptions);
        }
        this.pointlayer.setData(pointData);
        if (this.props.pointOptions) {
            this.pointlayer.setOptions(this.props.pointOptions);
        }
        this.textlayer.setData(pointData);
        if (this.props.textOptions) {
            this.textlayer.setOptions(this.props.textOptions);
        }
        // 如果data中指定了颜色，则单独new一个箭头颜色匹配的LineLayer
        Array.from(arrowMap.keys()).forEach(function (color) {
            if (color === undefined) {
                _this.arrowlayer.setData(arrowMap.get(undefined));
                _this.props.arrowOptions && _this.arrowlayer.setOptions(_this.props.arrowOptions);
            }
            else {
                var colorarrowlayer = new mapvgl_1.LineLayer(tslib_1.__assign(tslib_1.__assign({ blend: 'lighter', width: 10 }, _this.props.arrowOptions), { style: 'arrow', color: 'rgba(255, 255, 255, 0)', styleOptions: {
                        color: color
                    } }));
                _this.view.addLayer(colorarrowlayer);
                colorarrowlayer.setData(arrowMap.get(color));
                _this.colorarrowlayers.push(colorarrowlayer);
            }
        });
        if (this.props.enableAnimation) {
            this.flowlayer.setData(lineData);
            this.props.animationOptions && this.flowlayer.setOptions(this.props.animationOptions);
        }
    };
    Arc.prototype.createLayers = function () {
        this._createLayer = true;
        var map = this.map;
        var view = this.view = new mapvgl_1.View({
            map: map
        });
        var linelayer = this.linelayer = new mapvgl_1.LineLayer({
            blend: 'lighter',
            color: DEFAULT_COLOR,
            width: 4
        });
        view.addLayer(linelayer);
        var arrowlayer = this.arrowlayer = new mapvgl_1.LineLayer({
            blend: 'lighter',
            width: 10,
            style: 'arrow',
            color: 'rgba(255, 255, 255, 0)',
            styleOptions: {
                color: DEFAULT_COLOR
            }
        });
        view.addLayer(arrowlayer);
        var pointlayer = this.pointlayer = new mapvgl_1.PointLayer({
            blend: 'lighter',
            depthTest: false,
            color: DEFAULT_COLOR,
            size: 10
        });
        view.addLayer(pointlayer);
        var textlayer = this.textlayer = new mapvgl_1.TextLayer({
            offset: [0, 15],
            depthTest: false,
            color: '#333'
        });
        view.addLayer(textlayer);
        var flowlayer = this.flowlayer = new mapvgl_1.LineLayer({
            blend: 'lighter',
            color: function () { return 'rgb(240, 200, 200)'; },
            width: 2,
            animation: true,
            interval: 0.4,
            duration: 1,
            trailLength: 0.8
        });
        view.addLayer(flowlayer);
    };
    Arc.prototype.render = function () {
        return null;
    };
    Arc.defaultProps = {
        enableAnimation: true,
        showStartPoint: true,
        showEndPoint: true
    };
    return Arc;
}(common_1.Component));
exports.default = Arc;
