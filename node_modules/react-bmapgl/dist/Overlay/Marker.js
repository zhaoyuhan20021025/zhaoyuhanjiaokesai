"use strict";
/**
 * @file 地图标注组件
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var common_1 = require("../common");
var WrapperHOC_1 = tslib_1.__importDefault(require("../common/WrapperHOC"));
var shallowequal_1 = tslib_1.__importDefault(require("shallowequal"));
var Map_1 = require("../Map/Map");
function defaultIcons() {
    var defaultIconUrl = '//mapopen.bj.bcebos.com/cms/react-bmap/markers_new2x_fbb9e99.png';
    var icons = {
        'simple_red': new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(42 / 2, 66 / 2), {
            imageOffset: new BMapGL.Size(454 / 2, 378 / 2),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        }),
        'simple_blue': new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(42 / 2, 66 / 2), {
            imageOffset: new BMapGL.Size(454 / 2, 450 / 2),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        }),
        'loc_red': new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(46 / 2, 70 / 2), {
            imageOffset: new BMapGL.Size(400 / 2, 378 / 2),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        }),
        'loc_blue': new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(46 / 2, 70 / 2), {
            imageOffset: new BMapGL.Size(400 / 2, 450 / 2),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        }),
        'start': new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(50 / 2, 80 / 2), {
            imageOffset: new BMapGL.Size(400 / 2, 278 / 2),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        }),
        'end': new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(50 / 2, 80 / 2), {
            imageOffset: new BMapGL.Size(450 / 2, 278 / 2),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        }),
        'location': new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(28 / 2, 40 / 2), {
            imageOffset: new BMapGL.Size(248 / 2, 466 / 2),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        }),
    };
    for (var i = 1; i <= 10; i++) {
        icons['red' + i] = new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(42 / 2, 66 / 2), {
            imageOffset: new BMapGL.Size(42 / 2 * (i - 1), 0),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        });
    }
    for (var i = 1; i <= 10; i++) {
        icons['blue' + i] = new BMapGL.Icon(defaultIconUrl, new BMapGL.Size(42 / 2, 66 / 2), {
            imageOffset: new BMapGL.Size(42 / 2 * (i - 1), 132 / 2),
            imageSize: new BMapGL.Size(600 / 2, 600 / 2)
        });
    }
    return icons;
}
;
var eventsMap = [
    'click',
    'dblclick',
    'mousedown',
    'mouseup',
    'mouseout',
    'mouseover',
    'remove',
    'infowindowclose',
    'infowindowopen',
    'dragstart',
    'dragging',
    'dragend',
    'rightclick'
];
var methodsMap = {
    enableMassClear: ['enableMassClear', 'disableMassClear'],
    enableDragging: ['enableDragging', 'disableDragging']
};
var Marker = /** @class */ (function (_super) {
    tslib_1.__extends(Marker, _super);
    function Marker(props) {
        var _this = _super.call(this, props) || this;
        _this.options = [
            'offset',
            'icon',
            'enableMassClear',
            'enableDragging',
            'enableClicking',
            'raiseOnDrag',
            'draggingCursor',
            'rotation',
            'title'
        ];
        _this.defaultIcons = defaultIcons();
        return _this;
    }
    Marker.prototype.componentDidUpdate = function (prevProps) {
        if (!this.map) {
            this.initialize();
            return;
        }
        var _a = this.props, position = _a.position, icon = _a.icon, autoViewport = _a.autoViewport, offset = _a.offset, isTop = _a.isTop;
        var prePosition = prevProps.position, preIcon = prevProps.icon, preViewport = prevProps.autoViewport, preOffset = prevProps.offset, preTop = prevProps.isTop;
        var isDataChanged = position && !shallowequal_1.default(position, prePosition);
        var isIconChanged = !!(icon && !shallowequal_1.default(icon, preIcon));
        var isViewportChanged = !shallowequal_1.default(autoViewport, preViewport);
        var isOffsetChanged = !!(offset && !shallowequal_1.default(offset, preOffset));
        var isTopChanged = !shallowequal_1.default(isTop, preTop);
        var point = this.parsePosition(position);
        if (isDataChanged) {
            this.marker.setPosition(point);
        }
        if (isIconChanged) {
            var renderIcon = this.parseIcon(icon);
            this.marker.setIcon(renderIcon);
        }
        if (isOffsetChanged) {
            this.marker.setOffset(offset);
        }
        if (isTopChanged) {
            this.marker.setTop(!!isTop);
        }
        if (autoViewport && (isDataChanged || isViewportChanged)) {
            this.map.setCenter(point);
        }
    };
    Marker.prototype.componentDidMount = function () {
        this.initialize();
    };
    Marker.prototype.componentWillUnmount = function () {
        this.destroy();
    };
    Marker.prototype.destroy = function () {
        if (this.marker && this.map) {
            this.map.removeOverlay(this.marker);
            // @ts-ignore
            this.instance = this.marker = undefined;
        }
    };
    Marker.prototype.initialize = function () {
        var map = this.map = this.getMap();
        if (!map) {
            return;
        }
        this.destroy();
        var icon = this.parseIcon(this.props.icon);
        var position = this.parsePosition(this.props.position);
        var options = this.getOptions();
        options.icon = icon;
        this.instance = this.marker = new BMapGL.Marker(position, options);
        if (this.props.isTop) {
            this.marker.setTop(true);
        }
        map.addOverlay(this.marker);
        if (this.props.autoViewport) {
            map.setCenter(position);
        }
    };
    Marker.prototype.parsePosition = function (position) {
        var isMC = this.props.coordType === 'bd09mc';
        var point;
        if (position instanceof Array) {
            point = new BMapGL.Point(position[0], position[1]);
        }
        else if (position instanceof BMapGL.Point) {
            point = position;
        }
        else {
            point = new BMapGL.Point(position.lng, position.lat);
        }
        if (isMC) {
            point = BMapGL.Projection.convertMC2LL(point);
        }
        return point;
    };
    Marker.prototype.parseIcon = function (icon) {
        var renderIcon;
        if (icon && icon instanceof BMapGL.Icon) {
            renderIcon = icon;
        }
        else {
            if (icon && this.defaultIcons[icon]) {
                renderIcon = this.defaultIcons[icon];
            }
            else {
                renderIcon = this.defaultIcons.simple_red;
            }
        }
        return renderIcon;
    };
    Marker.prototype.render = function () {
        return null;
    };
    Marker.contextType = Map_1.MapContext;
    return Marker;
}(common_1.Component));
/**
 * defaultProps属性要放在外面，不然生成API文档时，没有默认值
 */
Marker.defaultProps = {
    icon: 'simple_red'
};
/**
 * 在地图上绘制简单的标注点
 * @visibleName Marker 点标注
 */
exports.default = WrapperHOC_1.default(Marker, eventsMap, methodsMap);
