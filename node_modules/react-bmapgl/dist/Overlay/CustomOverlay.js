"use strict";
/**
 * @file 地图自定义覆盖物组件
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var common_1 = require("../common");
var shallowequal_1 = tslib_1.__importDefault(require("shallowequal"));
var CustomOverlayDom_1 = tslib_1.__importDefault(require("./CustomOverlayDom"));
var Map_1 = require("../Map/Map");
;
/**
 * 在地图上通过传入DOM添加自定义覆盖物
 * @visibleName CustomOverlay 自定义覆盖物
 */
var CustomOverlay = /** @class */ (function (_super) {
    tslib_1.__extends(CustomOverlay, _super);
    function CustomOverlay(props) {
        var _this = _super.call(this, props) || this;
        _this.options = [
            'zIndex',
            'offset',
            'unit'
        ];
        return _this;
    }
    CustomOverlay.prototype.componentDidUpdate = function (prevProps) {
        if (!shallowequal_1.default(this.props, prevProps)) {
            this.initialize();
        }
    };
    CustomOverlay.prototype.componentDidMount = function () {
        this.initialize();
    };
    CustomOverlay.prototype.componentWillUnmount = function () {
        this.destroy();
    };
    CustomOverlay.prototype.destroy = function () {
        if (this.overlay && this.map) {
            this.overlay.destroy();
            this.map.removeOverlay(this.overlay);
            // @ts-ignore
            this.instance = this.overlay = undefined;
        }
    };
    CustomOverlay.prototype.initialize = function () {
        var map = this.map = this.getMap();
        if (!map) {
            return;
        }
        this.destroy();
        var options = this.getOptions();
        options.html = this.props.children;
        var position = this.parsePosition(this.props.position);
        // @ts-ignore
        this.instance = this.overlay = new CustomOverlayDom_1.default(position, options);
        map.addOverlay(this.overlay);
        if (this.props.autoViewport) {
            map.setCenter(position);
        }
    };
    CustomOverlay.prototype.parsePosition = function (position) {
        var isMC = this.props.coordType === 'bd09mc';
        var point;
        if (position instanceof Array) {
            point = new BMapGL.Point(position[0], position[1]);
        }
        else if (position instanceof BMapGL.Point) {
            point = position;
        }
        else {
            point = new BMapGL.Point(position.lng, position.lat);
        }
        if (isMC) {
            point = BMapGL.Projection.convertMC2LL(point);
        }
        return point;
    };
    CustomOverlay.prototype.render = function () {
        return null;
    };
    CustomOverlay.contextType = Map_1.MapContext;
    return CustomOverlay;
}(common_1.Component));
exports.default = CustomOverlay;
