"use strict";
/**
 * @file 圆形覆盖物
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Graphy_1 = tslib_1.__importDefault(require("./Graphy"));
var shallowequal_1 = tslib_1.__importDefault(require("shallowequal"));
;
/**
 * 在地图上绘制简单的圆形
 * @visibleName Circle 圆形
 */
var Circle = /** @class */ (function (_super) {
    tslib_1.__extends(Circle, _super);
    function Circle(props) {
        var _this = _super.call(this, props) || this;
        _this.options = [
            'strokeColor',
            'strokeWeight',
            'strokeOpacity',
            'strokeStyle',
            'fillColor',
            'fillOpacity',
            'enableMassClear',
            'enableEditing',
        ];
        return _this;
    }
    Circle.prototype.onDataUpdate = function (prevProps) {
        var _a = this.props, center = _a.center, radius = _a.radius, autoViewport = _a.autoViewport;
        var preCenter = prevProps.center, preRadius = prevProps.radius, preViewport = prevProps.autoViewport;
        var isCenterChanged = center && !shallowequal_1.default(center, preCenter);
        var isRadiusChanged = !!(radius && !shallowequal_1.default(radius, preRadius));
        var isViewportChanged = !shallowequal_1.default(autoViewport, preViewport);
        if (isCenterChanged) {
            this.overlay.setCenter(this.parseCenter(center));
        }
        if (isRadiusChanged) {
            this.overlay.setRadius(radius);
        }
        if (autoViewport && (isCenterChanged || isRadiusChanged || isViewportChanged)) {
            var bounds = this.overlay.getBounds();
            var viewport = this.props.map.getViewport(bounds, this.props.viewportOptions || {});
            this.props.map.setViewport(viewport);
        }
    };
    Circle.prototype.getOverlay = function () {
        var _a = this.props, center = _a.center, radius = _a.radius;
        return new BMapGL.Circle(this.parseCenter(center), radius, this.getOptions());
    };
    Circle.prototype.parseCenter = function (center) {
        var isMC = this.props.coordType === 'bd09mc';
        var point;
        if (center instanceof Array) {
            point = new BMapGL.Point(center[0], center[1]);
        }
        else if (center instanceof BMapGL.Point) {
            point = center;
        }
        else {
            point = new BMapGL.Point(center.lng, center.lat);
        }
        if (isMC) {
            point = BMapGL.Projection.convertMC2LL(point);
        }
        return point;
    };
    Circle.prototype.render = function () {
        return null;
    };
    return Circle;
}(Graphy_1.default));
exports.default = Circle;
