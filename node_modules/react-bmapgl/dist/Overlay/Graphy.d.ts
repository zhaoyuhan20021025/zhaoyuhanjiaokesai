/**
 * @file 图形基类
 * @author hedongran
 * @email hdr01@126.com
 */
/// <reference types="react" />
import { Component, MapChildrenProps } from '../common';
import { Options } from '../common/WrapperHOC';
export interface GraphyProps extends MapChildrenProps {
    /** 坐标体系，可选百度经纬度坐标或百度墨卡托坐标 */
    coordType?: 'bd09ll' | 'bd09mc';
    /** 自动聚焦视野 */
    autoViewport?: boolean;
    /** `autoViewport`打开时生效，配置视野的参数 */
    viewportOptions?: BMapGL.ViewportOptions;
    /** 描边或线颜色，同CSS颜色 */
    strokeColor?: string;
    /** 描边或线的宽度，单位为像素 */
    strokeWeight?: number;
    /** 描边或线的透明度，范围`0-1` */
    strokeOpacity?: number;
    /** 描边或线样式，可为实线、虚线、或者点状线 */
    strokeStyle?: 'solid' | 'dashed' | 'dotted';
    /** 填充颜色，同CSS颜色 */
    fillColor?: string;
    /** 填充的透明度，范围`0-1` */
    fillOpacity?: number;
    /** 鼠标左键单击事件的回调函数 */
    onClick?(e: Event): void;
    /** 鼠标左键双击事件的回调函数 */
    onDblclick?(e: Event): void;
    /** 鼠标右键单击事件的回调函数 */
    onRightclick?(e: Event): void;
    /** 鼠标指针移入覆盖物事件的回调函数 */
    onMouseover?(e: Event): void;
    /** 鼠标指针移出覆盖物事件的回调函数 */
    onMouseout?(e: Event): void;
    /** 鼠标指针在覆盖物上移动事件的回调函数 */
    onMousemove?(e: Event): void;
}
declare class Graphy<P extends GraphyProps, S = {}, SS = any> extends Component<P, S, SS> {
    static contextType: import("react").Context<import("../Map/Map").MapContextProps>;
    static defaultProps: GraphyProps | object;
    overlay: BMapGL.Overlay;
    options: Options;
    constructor(props: P);
    componentDidUpdate(prevProps: P): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    destroy(): void;
    initialize(): void;
    getOverlay(): BMapGL.Overlay;
    onDataUpdate(prevProps: P): void;
}
declare const _default: typeof Graphy;
export default _default;
