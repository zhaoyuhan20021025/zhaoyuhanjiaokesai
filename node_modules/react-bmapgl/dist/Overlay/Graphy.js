"use strict";
/**
 * @file 图形基类
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var common_1 = require("../common");
var WrapperHOC_1 = tslib_1.__importDefault(require("../common/WrapperHOC"));
var shallowequal_1 = tslib_1.__importDefault(require("shallowequal"));
var Map_1 = require("../Map/Map");
;
var eventsMap = [
    'click',
    'dblclick',
    'rightclick',
    'mousedown',
    'mouseup',
    'mouseout',
    'mouseover',
    'mousemove',
    'remove',
    'lineupdate'
];
var methodsMap = {
    enableMassClear: ['enableMassClear', 'disableMassClear'],
    enableEditing: ['enableEditing', 'disableEditing'],
};
var Graphy = /** @class */ (function (_super) {
    tslib_1.__extends(Graphy, _super);
    function Graphy(props) {
        var _this = _super.call(this, props) || this;
        _this.options = [
            'strokeColor',
            'strokeWeight',
            'strokeOpacity',
            'strokeStyle',
            'fillColor',
            'fillOpacity',
            'enableMassClear',
            'enableEditing',
            'enableClicking'
        ];
        return _this;
    }
    Graphy.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, strokeColor = _a.strokeColor, strokeWeight = _a.strokeWeight, strokeOpacity = _a.strokeOpacity, strokeStyle = _a.strokeStyle, fillColor = _a.fillColor, fillOpacity = _a.fillOpacity;
        var preStrokeColor = prevProps.strokeColor, preStrokeWeight = prevProps.strokeWeight, preStrokeOpacity = prevProps.strokeOpacity, preStrokeStyle = prevProps.strokeStyle, preFillColor = prevProps.fillColor, preFillOpacity = prevProps.fillOpacity;
        var isStrokeColorChanged = !shallowequal_1.default(strokeColor, preStrokeColor);
        var isStrokeWeightChanged = !shallowequal_1.default(strokeWeight, preStrokeWeight);
        var isStrokeOpacityChanged = !shallowequal_1.default(strokeOpacity, preStrokeOpacity);
        var isStrokeStyleChanged = !shallowequal_1.default(strokeStyle, preStrokeStyle);
        var isFillColorChanged = !shallowequal_1.default(fillColor, preFillColor);
        var isFillOpacityChanged = !shallowequal_1.default(fillOpacity, preFillOpacity);
        if (isStrokeColorChanged || isStrokeWeightChanged || isStrokeOpacityChanged || isStrokeStyleChanged
            || isFillColorChanged || isFillOpacityChanged) {
            this.overlay.setOptions(this.getOptions());
        }
        this.onDataUpdate(prevProps);
    };
    Graphy.prototype.componentDidMount = function () {
        this.initialize();
    };
    Graphy.prototype.componentWillUnmount = function () {
        this.destroy();
    };
    Graphy.prototype.destroy = function () {
        if (this.overlay) {
            this.map.removeOverlay(this.overlay);
            // @ts-ignore
            this.instance = this.overlay = undefined;
        }
    };
    Graphy.prototype.initialize = function () {
        var map = this.map = this.getMap();
        if (!map) {
            return;
        }
        this.destroy();
        this.instance = this.overlay = this.getOverlay();
        map.addOverlay(this.overlay);
        var viewport;
        if (this.overlay instanceof BMapGL.Polyline || this.overlay instanceof BMapGL.Polygon) {
            var path = this.overlay.getPath();
            viewport = map.getViewport(path, this.props.viewportOptions || {});
        }
        else if (this.overlay instanceof BMapGL.Circle) {
            var bounds = this.overlay.getBounds();
            viewport = map.getViewport(bounds, this.props.viewportOptions || {});
        }
        if (viewport && this.props.autoViewport) {
            map.setViewport(viewport);
        }
    };
    Graphy.prototype.getOverlay = function () {
        throw new Error('Method getOverlay not implemented.');
    };
    Graphy.prototype.onDataUpdate = function (prevProps) {
        throw new Error('Method onDataUpdate not implemented.');
    };
    Graphy.contextType = Map_1.MapContext;
    return Graphy;
}(common_1.Component));
exports.default = WrapperHOC_1.default(Graphy, eventsMap, methodsMap);
