"use strict";
/**
 * @file 文本标注
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var common_1 = require("../common");
var WrapperHOC_1 = tslib_1.__importDefault(require("../common/WrapperHOC"));
var shallowequal_1 = tslib_1.__importDefault(require("shallowequal"));
var Map_1 = require("../Map/Map");
;
var eventsMap = [
    'click',
    'dblclick',
    'rightclick',
    'mousedown',
    'mouseup',
    'mouseout',
    'mouseover',
    'mousemove',
    'remove',
];
var methodsMap = {
    enableMassClear: ['enableMassClear', 'disableMassClear']
};
var Label = /** @class */ (function (_super) {
    tslib_1.__extends(Label, _super);
    function Label(props) {
        var _this = _super.call(this, props) || this;
        _this.options = [
            'position',
            'offset',
            'enableMassClear',
        ];
        return _this;
    }
    Label.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, position = _a.position, offset = _a.offset, text = _a.text, style = _a.style;
        var prePosition = prevProps.position, preOffset = prevProps.offset, preText = prevProps.text, preStyle = prevProps.style;
        var isDataChanged = position && !shallowequal_1.default(position, prePosition);
        var isOffsetChanged = !!(offset && !shallowequal_1.default(offset, preOffset));
        var isTextChanged = !shallowequal_1.default(text, preText);
        var isStyleChanged = !!(style && !shallowequal_1.default(style, preStyle));
        var point = this.parsePosition(position);
        if (isDataChanged) {
            this.label.setPosition(point);
        }
        if (isOffsetChanged) {
            this.label.setOffset(offset);
        }
        if (isTextChanged) {
            this.label.setContent(text);
        }
        if (isStyleChanged) {
            this.label.setStyle(style);
        }
    };
    Label.prototype.componentDidMount = function () {
        this.initialize();
    };
    Label.prototype.componentWillUnmount = function () {
        this.destroy();
    };
    Label.prototype.destroy = function () {
        if (this.label) {
            this.map.removeOverlay(this.label);
            // @ts-ignore
            this.instance = this.label = undefined;
        }
    };
    Label.prototype.initialize = function () {
        var map = this.map = this.getMap();
        if (!map) {
            return;
        }
        this.destroy();
        var options = this.getOptions();
        var position = this.parsePosition(this.props.position);
        options.position = position;
        this.instance = this.label = new BMapGL.Label(this.props.text || '', options);
        map.addOverlay(this.label);
        if (this.props.style) {
            this.label.setStyle(this.props.style);
        }
    };
    Label.prototype.parsePosition = function (position) {
        var isMC = this.props.coordType === 'bd09mc';
        var point;
        if (position instanceof Array) {
            point = new BMapGL.Point(position[0], position[1]);
        }
        else if (position instanceof BMapGL.Point) {
            point = position;
        }
        else {
            point = new BMapGL.Point(position.lng, position.lat);
        }
        if (isMC) {
            point = BMapGL.Projection.convertMC2LL(point);
        }
        return point;
    };
    Label.prototype.render = function () {
        return null;
    };
    Label.contextType = Map_1.MapContext;
    return Label;
}(common_1.Component));
/**
 * defaultProps属性要放在外面，不然生成API文档时，没有默认值
 */
Label.defaultProps = {
    style: { color: 'red' }
};
/**
 *
 * @visibleName Label 文本标注
 */
exports.default = WrapperHOC_1.default(Label, eventsMap, methodsMap);
