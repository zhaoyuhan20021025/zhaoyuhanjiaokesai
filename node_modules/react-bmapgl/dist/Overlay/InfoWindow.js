"use strict";
/**
 * @file 信息窗口
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var common_1 = require("../common");
var WrapperHOC_1 = tslib_1.__importDefault(require("../common/WrapperHOC"));
var react_dom_1 = require("react-dom");
var Map_1 = require("../Map/Map");
;
var eventsMap = [
    'close',
    'open',
    'maximize',
    'restore',
    'clickclose'
];
var methodsMap = {
    enableMaximize: ['enableMaximize', 'disableMaximize'],
    enableAutoPan: ['enableAutoPan', 'disableAutoPan'],
    enableCloseOnClick: ['enableCloseOnClick', 'disableCloseOnClick']
};
var InfoWindow = /** @class */ (function (_super) {
    tslib_1.__extends(InfoWindow, _super);
    function InfoWindow(props) {
        var _this = _super.call(this, props) || this;
        _this.options = [
            'width',
            'height',
            'maxWidth',
            'offset',
            'title',
            'enableMassClear'
        ];
        return _this;
    }
    InfoWindow.prototype.componentDidUpdate = function (prevProps) {
        this.initialize();
    };
    InfoWindow.prototype.componentDidMount = function () {
        this.initialize();
    };
    InfoWindow.prototype.componentWillUnmount = function () {
        this.destroy();
    };
    InfoWindow.prototype.destroy = function () {
        if (this.content) {
            react_dom_1.unmountComponentAtNode(this.content);
        }
        if (this.infoWindow) {
            this.map.closeInfoWindow();
            // @ts-ignore
            this.instance = this.infoWindow = undefined;
        }
    };
    InfoWindow.prototype.initialize = function () {
        var map = this.map = this.getMap();
        if (!map) {
            return;
        }
        this.destroy();
        var options = this.getOptions();
        var position = this.parsePosition(this.props.position);
        this.instance = this.infoWindow = new BMapGL.InfoWindow(this.props.text || '', options);
        map.openInfoWindow(this.infoWindow, position);
        if (this.props.children !== undefined) {
            var content = this.content = document.createElement('div');
            // @ts-ignore
            react_dom_1.render(this.props.children, content);
            this.infoWindow.setContent(content);
        }
    };
    InfoWindow.prototype.parsePosition = function (position) {
        var isMC = this.props.coordType === 'bd09mc';
        var point;
        if (position instanceof Array) {
            point = new BMapGL.Point(position[0], position[1]);
        }
        else if (position instanceof BMapGL.Point) {
            point = position;
        }
        else {
            point = new BMapGL.Point(position.lng, position.lat);
        }
        if (isMC) {
            point = BMapGL.Projection.convertMC2LL(point);
        }
        return point;
    };
    InfoWindow.prototype.render = function () {
        return null;
    };
    InfoWindow.contextType = Map_1.MapContext;
    return InfoWindow;
}(common_1.Component));
/**
 * defaultProps属性要放在外面，不然生成API文档时，没有默认值
 */
InfoWindow.defaultProps = {};
/**
 * 在地图上创建信息窗口，用于展示弹窗信息
 * @visibleName InfoWindow 信息窗口
 */
exports.default = WrapperHOC_1.default(InfoWindow, eventsMap, methodsMap);
