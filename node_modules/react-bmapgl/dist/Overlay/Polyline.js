"use strict";
/**
 * @file 折线覆盖物
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Graphy_1 = tslib_1.__importDefault(require("./Graphy"));
var shallowequal_1 = tslib_1.__importDefault(require("shallowequal"));
;
/**
 * 在地图上绘制简单的折线
 * @visibleName Polyline 折线
 */
var Polyline = /** @class */ (function (_super) {
    tslib_1.__extends(Polyline, _super);
    function Polyline(props) {
        var _this = _super.call(this, props) || this;
        _this.options = [
            'strokeColor',
            'strokeWeight',
            'strokeOpacity',
            'strokeStyle',
            'dashArray',
            'enableMassClear',
            'enableEditing',
        ];
        return _this;
    }
    Polyline.prototype.onDataUpdate = function (prevProps) {
        var _a = this.props, path = _a.path, autoViewport = _a.autoViewport;
        var prePath = prevProps.path, preViewport = prevProps.autoViewport;
        var isDataChanged = path && !shallowequal_1.default(path, prePath);
        var isViewportChanged = !shallowequal_1.default(autoViewport, preViewport);
        if (isDataChanged) {
            this.overlay.setPath(this.parsePath(path));
        }
        if (autoViewport && (isDataChanged || isViewportChanged)) {
            var path_1 = this.overlay.getPath();
            var viewport = this.props.map.getViewport(path_1, this.props.viewportOptions || {});
            this.props.map.setViewport(viewport);
        }
    };
    Polyline.prototype.getOverlay = function () {
        var path = this.parsePath(this.props.path);
        return new BMapGL.Polyline(path, this.getOptions());
    };
    Polyline.prototype.parsePath = function (path) {
        var isMC = this.props.coordType === 'bd09mc';
        var out = path.map(function (position) {
            var point;
            if (position instanceof Array) {
                point = new BMapGL.Point(position[0], position[1]);
            }
            else if (position instanceof BMapGL.Point) {
                point = position;
            }
            else {
                point = new BMapGL.Point(position.lng, position.lat);
            }
            if (isMC) {
                point = BMapGL.Projection.convertMC2LL(point);
            }
            return point;
        });
        return out;
    };
    Polyline.prototype.render = function () {
        return null;
    };
    return Polyline;
}(Graphy_1.default));
exports.default = Polyline;
