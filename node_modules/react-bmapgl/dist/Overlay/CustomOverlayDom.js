"use strict";
/**
 * @file 自定义覆盖物的DOM生成类
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
var react_dom_1 = require("react-dom");
/**
 * 自定义覆盖物的DOM生成类
 * @param point 定位点坐标
 * @param options 传入参数，如offset等
 */
function CustomOverlayDom(point, options) {
    this._point = new BMapGL.Point(point.lng, point.lat);
    this._options = options || {};
    this._html = options.html || '';
    // 这里不用 CustomOverlayDom.prototype = new BMapGL.Overlay() 继承原型链上的方法
    // 因为在异步加载的场景下，上面的语句调用了BMapGL会导致`BMapGL not defined`的报错
    // 所以这里用一个魔改的trick方法来继承 BMapGL.Overlay 原型链上的方法
    // 注意，这样写需要在if判断中剔除要覆盖的函数
    var extend = new BMapGL.Overlay();
    for (var key in extend) {
        if (key !== 'initialize' && key !== 'draw' && key !== 'destroy') {
            this.__proto__[key] = extend[key];
        }
    }
}
CustomOverlayDom.prototype.initialize = function (map) {
    this._map = map;
    this._div = document.createElement("div");
    this._div.style.position = "absolute";
    this._div.style.zIndex = this._options.zIndex || BMapGL.Overlay.getZIndex(this._point.lat);
    react_dom_1.render(this._html, this._div);
    this._div.onmousedown = function (event) {
        event = event || window.event;
        if (event.preventDefault) {
            event.preventDefault();
        }
        else {
            event.returnValue = false;
        }
        return false;
    };
    map.getPanes().floatShadow.appendChild(this._div);
    return this._div;
};
CustomOverlayDom.prototype.destroy = function () {
    react_dom_1.unmountComponentAtNode(this._div);
};
CustomOverlayDom.prototype.draw = function () {
    var map = this._map;
    var pixel = map.pointToOverlayPixel(this._point);
    var offset = { width: 0, height: 0 };
    if (this._options && this._options.offset) {
        offset = this._options.offset;
    }
    var offW = offset.width;
    var offH = offset.height;
    if (this._options && this._options.unit && this._options.unit === 'm') {
        offW /= map.getZoomUnits();
        offH /= map.getZoomUnits();
    }
    this._div.style.left = pixel.x + offW + 'px';
    this._div.style.top = pixel.y + offH + 'px';
    this._div.style.transform = 'translate(-50%, -100%)';
};
exports.default = CustomOverlayDom;
