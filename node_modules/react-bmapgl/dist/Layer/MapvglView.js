"use strict";
/**
 * @file mapvgl的view图层管理类
 * @author hedongran
 * @email hdr01@126.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewContext = void 0;
var tslib_1 = require("tslib");
// @ts-ignore
var mapvgl_1 = require("mapvgl");
var react_1 = tslib_1.__importStar(require("react"));
var common_1 = require("../common");
var Map_1 = require("../Map/Map");
;
exports.ViewContext = react_1.default.createContext({
    // We provide a default function for Context without provider
    view: undefined
});
/**
 * 该组件将MapVGL的图层管理器使用`react`进行了一层封装。所有`<MapvglLayer>`组件需要作为该组件的子组件，文档参考[MapVGL图层管理器](https://mapv.baidu.com/gl/docs/View.html)
 * @visibleName MapvglView MapVGL图层管理器
 */
var MapvglView = /** @class */ (function (_super) {
    tslib_1.__extends(MapvglView, _super);
    function MapvglView(props) {
        return _super.call(this, props) || this;
    }
    MapvglView.prototype.componentDidMount = function () {
        this.initialize();
        this.forceUpdate();
    };
    MapvglView.prototype.componentWillUnmount = function () {
        if (this.view) {
            this.view.destroy();
            // @ts-ignore
            this.view = null;
        }
    };
    MapvglView.prototype.componentDidUpdate = function (prevProps) {
        if (!this.map || !this.view) {
            this.initialize();
        }
    };
    MapvglView.prototype.initialize = function () {
        var map = this.map = this.getMap();
        if (!map || this.view) {
            return;
        }
        if (!this.view) {
            var effects_1 = [];
            var simpleEffects = this.props.effects;
            var preserveDrawingBuffer = this.props.preserveDrawingBuffer;
            if (simpleEffects && simpleEffects.length) {
                simpleEffects.forEach(function (name) {
                    if (name === 'bloom') {
                        effects_1.push(new mapvgl_1.BloomEffect());
                    }
                    else if (name === 'bright') {
                        effects_1.push(new mapvgl_1.BrightEffect());
                    }
                    else if (name === 'blur') {
                        effects_1.push(new mapvgl_1.BlurEffect());
                    }
                });
            }
            this.view = new mapvgl_1.View({
                effects: effects_1,
                preserveDrawingBuffer: preserveDrawingBuffer,
                map: map
            });
        }
    };
    /**
     * 在子元素props中附上view和map字段
     * @return {string|Element} children with props
     * @memberof MapvglView
     */
    MapvglView.prototype.renderChildren = function (children) {
        var _this = this;
        if (!children || !this.map || !this.view) {
            return;
        }
        return react_1.default.Children.map(children, function (child) {
            if (!child) {
                return;
            }
            if (typeof child.type === 'string') {
                return child;
            }
            else {
                return react_1.default.cloneElement(child, {
                    map: _this.map,
                    view: _this.view
                });
            }
        });
    };
    MapvglView.prototype.render = function () {
        return (react_1.default.createElement(react_1.Fragment, null,
            react_1.default.createElement(exports.ViewContext.Provider, { value: {
                    map: this.map,
                    view: this.view
                } }, this.renderChildren(this.props.children))));
    };
    MapvglView.contextType = Map_1.MapContext;
    return MapvglView;
}(common_1.Component));
exports.default = MapvglView;
